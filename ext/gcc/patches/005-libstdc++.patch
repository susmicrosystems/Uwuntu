--- libstdc++-v3/configure
+++ libstdc++-v3/configure
@@ -7069,6 +7069,9 @@
   # as canadian for Windows hosts.
   lt_cv_deplibs_check_method=pass_all
   ;;
+eklat*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
 esac
 
 fi
@@ -9826,6 +9829,9 @@
   openbsd*)
     with_gnu_ld=no
     ;;
+  eklat*)
+    link_all_deplibs=no
+    ;;
   esac
 
   ld_shlibs=yes
@@ -10879,6 +10885,9 @@
       hardcode_shlibpath_var=no
       ;;
 
+    eklat*)
+      ;;
+
     *)
       ld_shlibs=no
       ;;
@@ -11824,6 +11833,17 @@
       ;;
   esac
   ;;
+
+eklat*)
+  version_type=linux
+  need_lib_prefix=no
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  hardcode_libdir_flag_spec='${wl}-rpath ${wl}$objdir'
+  ;;
+
 *)
   dynamic_linker=no
   ;;
@@ -12056,6 +12076,11 @@
 
     ;;
 
+  eklat*)
+    lt_cv_dlopen="dlopen"
+    lt_cv_dlopen_libs="-ldl"
+    ;;
+
   *)
     ac_fn_c_check_func "$LINENO" "shl_load" "ac_cv_func_shl_load"
 if test "x$ac_cv_func_shl_load" = xyes; then :
@@ -14007,6 +14032,11 @@
         ld_shlibs_CXX=yes
         ;;
 
+      eklat*)
+        ld_shlibs_CXX=yes
+        hardcode_libdir_flag_spec_CXX='${wl}-rpath ${wl}$objdir'
+        ;;
+
       *)
         # FIXME: insert proper C++ library support
         ld_shlibs_CXX=no
@@ -15574,6 +15604,14 @@
       ;;
   esac
   ;;
+eklat*)
+  version_type=linux
+  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'
+  soname_spec='${libname}${release}${shared_ext}$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  hardcode_libdir_flag_spec='${wl}-rpath ${wl}$objdir'
+  ;;
 *)
   dynamic_linker=no
   ;;
@@ -38409,6 +38447,11 @@
     SECTION_FLAGS='-ffunction-sections -fdata-sections'
 
     ;;
+
+  *-eklat*)
+    SECTION_FLAGS='-ffunction-sections -fdata-sections'
+
+    ;;
 
   *-hpux*)
     SECTION_FLAGS='-ffunction-sections -fdata-sections'
--- libstdc++-v3/crossconfig.m4
+++ libstdc++-v3/crossconfig.m4
@@ -299,6 +299,13 @@
 dnl # long_double_math_on_this_cpu in configure.ac, right after
 dnl # the expansion of the present macro.
     ;;
+
+  *-eklat*)
+    GLIBCXX_CHECK_COMPILER_FEATURES
+    GLIBCXX_CHECK_LINKER_FEATURES
+    GLIBCXX_CHECK_MATH_SUPPORT
+    GLIBCXX_CHECK_STDLIB_SUPPORT
+    ;;
   *)
     AC_MSG_ERROR([No support for this host/target combination.])
    ;;
--- libstdc++-v3/src/c++11/cow-stdexcept.cc
+++ libstdc++-v3/src/c++11/cow-stdexcept.cc
@@ -204,8 +204,6 @@
 
 using std::size_t;
 
-extern "C" {
-
 #ifndef _GLIBCXX_MANGLE_SIZE_T
 #error Mangled name of size_t type not defined.
 #endif
@@ -222,24 +220,16 @@
 
 // Declare all libitm symbols we rely on, but make them weak so that we do
 // not depend on libitm.
-extern void* _ZGTtnaX (size_t sz) __attribute__((weak));
-extern void _ZGTtdlPv (void* ptr) __attribute__((weak));
-extern uint8_t _ITM_RU1(const uint8_t *p)
-  ITM_REGPARM __attribute__((weak));
-extern uint16_t _ITM_RU2(const uint16_t *p)
-  ITM_REGPARM __attribute__((weak));
-extern uint32_t _ITM_RU4(const uint32_t *p)
-  ITM_REGPARM __attribute__((weak));
-extern uint64_t _ITM_RU8(const uint64_t *p)
-  ITM_REGPARM __attribute__((weak));
-extern void _ITM_memcpyRtWn(void *, const void *, size_t)
-  ITM_REGPARM __attribute__((weak));
-extern void _ITM_memcpyRnWt(void *, const void *, size_t)
-  ITM_REGPARM __attribute__((weak));
-extern void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *)
-  ITM_REGPARM __attribute__((weak));
-
-}
+// eklat: we don't have libitm at all, just fake those functions
+static inline void* _ZGTtnaX (size_t sz) {return NULL;};
+static inline void _ZGTtdlPv (void*) {};
+static inline uint8_t _ITM_RU1(const uint8_t *) {return 0;}
+static inline uint16_t _ITM_RU2(const uint16_t *) {return 0;}
+static inline uint32_t _ITM_RU4(const uint32_t *) {return 0;}
+static inline uint64_t _ITM_RU8(const uint64_t *) {return 0;}
+static inline void _ITM_memcpyRtWn(void *, const void *, size_t) {}
+static inline void _ITM_memcpyRnWt(void *, const void *, size_t) {}
+static inline void _ITM_addUserCommitAction(void (*)(void *), uint64_t, void *) {};
 
 // A transactional version of basic_string::basic_string(const char *s)
 // that also notifies the TM runtime about allocations belonging to this
