--- configure
+++ configure
@@ -5931,6 +5931,10 @@
 os2*)
   lt_cv_deplibs_check_method=pass_all
   ;;
+eklat*)
+  lt_cv_deplibs_check_method=pass_all
+  ;;
+
 esac

 fi
@@ -9856,6 +9860,12 @@
     ;;
   esac
 
+  case $host_os in
+  eklat*)
+    link_all_deplibs=no
+    ;;
+  esac
+
   ld_shlibs=yes
 
   # On some targets, GNU ld is compatible enough with the native linker
@@ -11042,6 +11046,9 @@
       hardcode_shlibpath_var=no
       ;;

+    eklat*)
+      ;;
+
     *)
       ld_shlibs=no
       ;;
@@ -12110,6 +12117,15 @@
   shlibpath_var=LD_LIBRARY_PATH
   ;;

+eklat*)
+  version_type=linux # correct to gnu/linux during the next big refactor
+  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'
+  soname_spec='$libname$release$shared_ext$major'
+  shlibpath_var=LD_LIBRARY_PATH
+  hardcode_into_libs=yes
+  hardcode_libdir_flag_spec=''
+  ;;
+
 *)
   dynamic_linker=no
   ;;
--- build-aux/ltmain.sh
+++ build-aux/ltmain.sh
@@ -7854,7 +7854,7 @@
 	case $pass in
 	dlopen) libs=$dlfiles ;;
 	dlpreopen) libs=$dlprefiles ;;
-	link) libs="$deplibs %DEPLIBS% $dependency_libs" ;;
+	link) libs="$deplibs %DEPLIBS%" ;;
 	esac
       fi
       if test lib,dlpreopen = "$linkmode,$pass"; then
@@ -8173,19 +8173,19 @@
 	    # It is a libtool convenience library, so add in its objects.
 	    func_append convenience " $ladir/$objdir/$old_library"
 	    func_append old_convenience " $ladir/$objdir/$old_library"
+	    tmp_libs=
+	    for deplib in $dependency_libs; do
+	      deplibs="$deplib $deplibs"
+	      if $opt_preserve_dup_deps; then
+	        case "$tmp_libs " in
+	        *" $deplib "*) func_append specialdeplibs " $deplib" ;;
+	        esac
+	      fi
+	      func_append tmp_libs " $deplib"
+	    done
 	  elif test prog != "$linkmode" && test lib != "$linkmode"; then
 	    func_fatal_error "'$lib' is not a convenience library"
 	  fi
-	  tmp_libs=
-	  for deplib in $dependency_libs; do
-	    deplibs="$deplib $deplibs"
-	    if $opt_preserve_dup_deps; then
-	      case "$tmp_libs " in
-	      *" $deplib "*) func_append specialdeplibs " $deplib" ;;
-	      esac
-	    fi
-	    func_append tmp_libs " $deplib"
-	  done
 	  continue
 	fi # $pass = conv
 
@@ -8742,23 +8742,23 @@
 	  test no = "$link_static" && newdependency_libs="$abs_ladir/$laname $newdependency_libs"
 	  # ... and its dependency_libs
 	  tmp_libs=
-	  for deplib in $dependency_libs; do
-	    newdependency_libs="$deplib $newdependency_libs"
-	    case $deplib in
-              -L*) func_stripname '-L' '' "$deplib"
-                   func_resolve_sysroot "$func_stripname_result";;
-              *) func_resolve_sysroot "$deplib" ;;
-            esac
-	    if $opt_preserve_dup_deps; then
-	      case "$tmp_libs " in
-	      *" $func_resolve_sysroot_result "*)
-                func_append specialdeplibs " $func_resolve_sysroot_result" ;;
-	      esac
-	    fi
-	    func_append tmp_libs " $func_resolve_sysroot_result"
-	  done
-
 	  if test no != "$link_all_deplibs"; then
+	    for deplib in $dependency_libs; do
+	      newdependency_libs="$deplib $newdependency_libs"
+	      case $deplib in
+                -L*) func_stripname '-L' '' "$deplib"
+                     func_resolve_sysroot "$func_stripname_result";;
+                *) func_resolve_sysroot "$deplib" ;;
+              esac
+	     if $opt_preserve_dup_deps; then
+	        case "$tmp_libs " in
+	        *" $func_resolve_sysroot_result "*)
+                  func_append specialdeplibs " $func_resolve_sysroot_result" ;;
+	        esac
+	      fi
+	      func_append tmp_libs " $func_resolve_sysroot_result"
+	    done
+
 	    # Add the search paths of all dependency libraries
 	    for deplib in $dependency_libs; do
 	      path=
