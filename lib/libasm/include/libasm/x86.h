#ifndef LIBASM_X86_H
#define LIBASM_X86_H

#include <stddef.h>
#include <stdint.h>

enum asm_x86_reg_size
{
	ASM_X86_REG_8,
	ASM_X86_REG_16,
	ASM_X86_REG_32,
	ASM_X86_REG_X87,
	ASM_X86_REG_MMX,
	ASM_X86_REG_XMM,
	ASM_X86_REG_CTRL,
	ASM_X86_REG_DBG,
};

enum asm_x86_segment
{
	ASM_X86_SEGMENT_NONE,
	ASM_X86_SEGMENT_ES,
	ASM_X86_SEGMENT_CS,
	ASM_X86_SEGMENT_SS,
	ASM_X86_SEGMENT_DS,
	ASM_X86_SEGMENT_FS,
	ASM_X86_SEGMENT_GS,
};

enum asm_x86_operand_type
{
	ASM_X86_OPERAND_REG,
	ASM_X86_OPERAND_REG_8,
	ASM_X86_OPERAND_REG_X86,
	ASM_X86_OPERAND_REG_MMX,
	ASM_X86_OPERAND_REG_XMM,
	ASM_X86_OPERAND_REG_REG,
	ASM_X86_OPERAND_MRM,
	ASM_X86_OPERAND_IMM,
	ASM_X86_OPERAND_REL,
	ASM_X86_OPERAND_REL8,
	ASM_X86_OPERAND_CS,
	ASM_X86_OPERAND_DS,
	ASM_X86_OPERAND_ES,
	ASM_X86_OPERAND_FS,
	ASM_X86_OPERAND_GS,
	ASM_X86_OPERAND_SS,
	ASM_X86_OPERAND_AL,
	ASM_X86_OPERAND_AX,
	ASM_X86_OPERAND_CL,
	ASM_X86_OPERAND_CX,
	ASM_X86_OPERAND_DL,
	ASM_X86_OPERAND_DX,
	ASM_X86_OPERAND_BL,
	ASM_X86_OPERAND_BX,
	ASM_X86_OPERAND_AH,
	ASM_X86_OPERAND_SP,
	ASM_X86_OPERAND_CH,
	ASM_X86_OPERAND_BP,
	ASM_X86_OPERAND_DH,
	ASM_X86_OPERAND_SI,
	ASM_X86_OPERAND_BH,
	ASM_X86_OPERAND_DI,
	ASM_X86_OPERAND_0X1,
	ASM_X86_OPERAND_0X3,
	ASM_X86_OPERAND_FARSEG,
	ASM_X86_OPERAND_FARADDR,
	ASM_X86_OPERAND_FMRM,
};

enum asm_x86_opcode_extra
{
	ASM_X86_OPCODE_EXTRA_NONE,
	ASM_X86_OPCODE_EXTRA_IMM,
	ASM_X86_OPCODE_EXTRA_IMM8,
	ASM_X86_OPCODE_EXTRA_IMM16,
	ASM_X86_OPCODE_EXTRA_MRM,
	ASM_X86_OPCODE_EXTRA_MRM_IMM,
	ASM_X86_OPCODE_EXTRA_MRM_IMM8,
	ASM_X86_OPCODE_EXTRA_MRM8,
	ASM_X86_OPCODE_EXTRA_MRM8_IMM8,
	ASM_X86_OPCODE_EXTRA_FAR,
	ASM_X86_OPCODE_EXTRA_MRM_FAR,
	ASM_X86_OPCODE_EXTRA_IMM16_IMM8,
};

struct asm_x86_opcode
{
	char names[2][11];
	uint8_t extra : 5;
	uint8_t operands_count : 3;
	uint8_t operands[4];
};

int asm_x86_disas(char *buf, size_t size, const uint8_t *data, size_t pos);

#endif
