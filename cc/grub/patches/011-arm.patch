--- include/multiboot2.h
+++ include/multiboot2.h
@@ -79,6 +79,7 @@
 #define MULTIBOOT2_ARCHITECTURE_I386  0
 #define MULTIBOOT2_ARCHITECTURE_MIPS32  4
 #define MULTIBOOT2_ARCHITECTURE_AARCH64 8
+#define MULTIBOOT2_ARCHITECTURE_ARM32 9
 #define MULTIBOOT_HEADER_TAG_OPTIONAL 1
 
 #define MULTIBOOT_LOAD_PREFERENCE_NONE 0
--- /dev/null
+++ grub-core/lib/arm/relocator.c
@@ -0,0 +1,162 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ *
+ */
+#include <grub/mm.h>
+#include <grub/misc.h>
+
+#include <grub/types.h>
+#include <grub/types.h>
+#include <grub/err.h>
+#include <grub/cache.h>
+
+#include <grub/arm/relocator.h>
+#include <grub/relocator_private.h>
+
+/* Defines to simplify creating machine code instructions */
+
+#define ARM_INSTR_LDR	0xe5900000
+#define ARM_INSTR_BX	0xe12fff10
+#define ARM_INSTR_NOP	0xe1a00000
+#define ARM_INSTR_LDM	0xe8900000
+#define ARM_INSTR_ADD	0xe2800000
+
+extern grub_uint8_t grub_relocator_forward_start;
+extern grub_uint8_t grub_relocator_forward_end;
+extern grub_uint8_t grub_relocator_forward_regs;
+extern grub_uint8_t grub_relocator_backward_start;
+extern grub_uint8_t grub_relocator_backward_end;
+extern grub_uint8_t grub_relocator_backward_regs;
+extern grub_uint32_t grub_relocator_check_endian;
+
+#define REGW_SIZEOF (1 * sizeof (grub_uint32_t))
+#define JUMP_SIZEOF (3 * sizeof (grub_uint32_t))
+
+#define RELOCATOR_SIZEOF(x) (&grub_relocator_##x##_end \
+			     - &grub_relocator_##x##_start)
+
+#define RELOCATOR_REGS_OFFSET(x) (&grub_relocator_##x##_regs \
+				  - &grub_relocator_##x##_start)
+
+grub_size_t grub_relocator_align = sizeof (grub_uint32_t);
+grub_size_t grub_relocator_forward_size;
+grub_size_t grub_relocator_backward_size;
+grub_size_t grub_relocator_jumper_size = JUMP_SIZEOF + REGW_SIZEOF;
+
+void
+grub_cpu_relocator_init (void)
+{
+  grub_relocator_forward_size = RELOCATOR_SIZEOF (forward);
+  grub_relocator_backward_size = RELOCATOR_SIZEOF (backward);
+}
+
+static void
+write_val (grub_uint32_t val, void **target)
+{
+  *(grub_uint32_t *) *target = val;
+  *target = ((grub_uint32_t *) *target) + 1;
+}
+
+void
+grub_cpu_relocator_jumper (void *rels, grub_addr_t addr)
+{
+  /* ldr r0, [pc, #4] */
+  write_val (ARM_INSTR_LDR | (0xF << 16) | 0x4, &rels);
+
+  /* bx r0 */
+  write_val (ARM_INSTR_BX, &rels);
+
+  /* nop */
+  write_val (ARM_INSTR_NOP, &rels);
+
+  /* immediate value */
+  write_val (addr, &rels);
+}
+
+void
+grub_cpu_relocator_backward (void *ptr, void *src, void *dest,
+			     grub_size_t size)
+{
+  grub_memcpy (ptr, &grub_relocator_backward_start,
+	       RELOCATOR_SIZEOF (backward));
+  ptr = (grub_uint8_t*) ptr + RELOCATOR_REGS_OFFSET (backward);
+  write_val ((grub_uint32_t) src, &ptr);
+  write_val ((grub_uint32_t) dest, &ptr);
+  write_val ((grub_uint32_t) size, &ptr);
+}
+
+void
+grub_cpu_relocator_forward (void *ptr, void *src, void *dest,
+			    grub_size_t size)
+{
+  grub_memcpy (ptr, &grub_relocator_forward_start, 
+	       RELOCATOR_SIZEOF (forward));
+  ptr = (grub_uint8_t*) ptr + RELOCATOR_REGS_OFFSET (forward);
+  write_val ((grub_uint32_t) src, &ptr);
+  write_val ((grub_uint32_t) dest, &ptr);
+  write_val ((grub_uint32_t) size, &ptr);
+}
+
+grub_err_t
+grub_relocator32_boot (struct grub_relocator *rel,
+		       struct grub_relocator32_state state)
+{
+  grub_relocator_chunk_t ch;
+  void *ptr;
+  grub_err_t err;
+  void *relst;
+  grub_size_t relsize;
+  grub_size_t stateset_size = 4 * REGW_SIZEOF + 15 * REGW_SIZEOF;
+  unsigned i;
+
+  err = grub_relocator_alloc_chunk_align (rel, &ch, 0,
+					  (0xffffffff - stateset_size)
+					  + 1, stateset_size,
+					  sizeof (grub_uint32_t),
+					  GRUB_RELOCATOR_PREFERENCE_NONE, 0);
+
+  if (err)
+    return err;
+
+  ptr = get_virtual_current_address (ch);
+
+  /* add r0, pc, #8 */
+  write_val (ARM_INSTR_ADD | (0xF << 16) | 0x8, &ptr);
+
+  /* ldm r0, {r0-r14} */
+  write_val (ARM_INSTR_LDM | 0x7FFF, &ptr);
+
+  /* bx r8 */
+  write_val (ARM_INSTR_BX | 0x8, &ptr);
+
+  /* nop */
+  write_val (ARM_INSTR_NOP, &ptr);
+
+  for (i = 0; i < 15; i++)
+    write_val (state.r[i], &ptr);
+
+  err = grub_relocator_prepare_relocs (rel, get_physical_target_address(ch), &relst, &relsize);
+  if (err)
+    return err;
+
+  grub_arch_sync_caches ((void *) relst, relsize);
+
+  ((void (*) (void))  (relst)) ();
+
+  /* Not reached.  */
+  return GRUB_ERR_NONE;
+}
--- /dev/null
+++ grub-core/lib/arm/relocator_asm.S
@@ -0,0 +1,70 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ */
+
+#include <grub/symbol.h>
+
+	.p2align	4	/* force 16-byte alignment */
+
+VARIABLE (grub_relocator_forward_start)
+
+	b copybegin1
+
+VARIABLE (grub_relocator_forward_regs)
+	.skip 12
+
+copybegin1:
+	ldr r0, [pc, #-20]
+	ldr r1, [pc, #-20]
+	ldr r2, [pc, #-20]
+
+copycont1:
+	ldrb r3, [r0]
+	strb r3, [r1]
+	add r0, r0, #1
+	add r1, r1, #1
+	subs r2, r2, #1
+	bne copycont1
+
+VARIABLE (grub_relocator_forward_end)
+
+	.p2align	4	/* force 16-byte alignment */
+
+VARIABLE (grub_relocator_backward_start)
+
+	b copybegin2
+
+VARIABLE (grub_relocator_backward_regs)
+	.skip 12
+
+copybegin2:
+	ldr r0, [pc, #-20]
+	ldr r1, [pc, #-20]
+	ldr r2, [pc, #-20]
+
+	add r0, r0, r2
+	add r1, r1, r2
+
+copycont2:
+	sub r0, r0, #1
+	sub r1, r1, #1
+	ldrb r3, [r0]
+	strb r3, [r1]
+	subs r2, r2, #1
+	bne copycont2
+
+VARIABLE (grub_relocator_backward_end)
--- /dev/null
+++ include/grub/arm/relocator.h
@@ -0,0 +1,38 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024 Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ */
+
+#ifndef GRUB_RELOCATOR_CPU_HEADER
+#define GRUB_RELOCATOR_CPU_HEADER	1
+
+#include <grub/types.h>
+#include <grub/err.h>
+#include <grub/relocator.h>
+
+struct grub_relocator32_state
+{
+  grub_uint32_t r[15];
+};
+
+grub_err_t
+grub_relocator32_boot (struct grub_relocator *rel,
+		       struct grub_relocator32_state state);
+
+#define grub_relocator32_efi_boot grub_relocator32_boot
+#define grub_relocator32_efi_state grub_relocator32_state
+
+#endif /* ! GRUB_RELOCATOR_CPU_HEADER */
--- /dev/null
+++ grub-core/mmap/arm/uppermem.c
@@ -0,0 +1,72 @@
+/* Compute amount of lower and upper memory till the first hole. */
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ */
+
+#include <grub/memory.h>
+#include <grub/mm.h>
+#include <grub/misc.h>
+#include <grub/cpu/memory.h>
+
+/* Helper for grub_mmap_get_lower.  */
+static int
+lower_hook (grub_uint64_t addr, grub_uint64_t size, grub_memory_type_t type,
+	    void *data)
+{
+  grub_uint64_t *lower = data;
+
+  if (type != GRUB_MEMORY_AVAILABLE)
+    return 0;
+  if (addr == 0)
+    *lower = size;
+  return 0;
+}
+
+grub_uint64_t
+grub_mmap_get_lower (void)
+{
+  grub_uint64_t lower = 0;
+
+  grub_mmap_iterate (lower_hook, &lower);
+  if (lower > GRUB_ARCH_LOWMEMMAXSIZE)
+    lower = GRUB_ARCH_LOWMEMMAXSIZE;
+  return lower;
+}
+
+/* Helper for grub_mmap_get_upper.  */
+static int
+upper_hook (grub_uint64_t addr, grub_uint64_t size, grub_memory_type_t type,
+	    void *data)
+{
+  grub_uint64_t *upper = data;
+
+  if (type != GRUB_MEMORY_AVAILABLE)
+    return 0;
+  if (addr <= GRUB_ARCH_HIGHMEMPSTART && addr + size
+      > GRUB_ARCH_HIGHMEMPSTART)
+    *upper = addr + size - GRUB_ARCH_HIGHMEMPSTART;
+  return 0;
+}
+
+grub_uint64_t
+grub_mmap_get_upper (void)
+{
+  grub_uint64_t upper = 0;
+
+  grub_mmap_iterate (upper_hook, &upper);
+  return upper;
+}
--- /dev/null
+++ include/grub/arm/memory.h
@@ -0,0 +1,60 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024 Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ */
+
+#ifndef GRUB_MEMORY_CPU_HEADER
+#define GRUB_MEMORY_CPU_HEADER 1
+
+#ifndef ASM_FILE
+#include <grub/symbol.h>
+#include <grub/err.h>
+#include <grub/types.h>
+#endif
+
+#define GRUB_ARCH_LOWMEMVSTART 0x80000000
+#define GRUB_ARCH_LOWMEMPSTART 0x00000000
+#define GRUB_ARCH_LOWMEMMAXSIZE 0x10000000
+#define GRUB_ARCH_HIGHMEMPSTART 0x10000000
+
+#ifndef ASM_FILE
+
+typedef grub_addr_t grub_phys_addr_t;
+
+static inline grub_phys_addr_t
+grub_vtop (void *a)
+{
+  return (grub_phys_addr_t) a;
+}
+
+static inline void *
+grub_map_memory (grub_phys_addr_t a, grub_size_t size __attribute__ ((unused)))
+{
+  return (void *) a;
+}
+
+static inline void
+grub_unmap_memory (void *a __attribute__ ((unused)),
+		   grub_size_t size __attribute__ ((unused)))
+{
+}
+
+grub_uint64_t grub_mmap_get_lower (void);
+grub_uint64_t grub_mmap_get_upper (void);
+
+#endif
+
+#endif
--- grub-core/loader/multiboot_mbi2.c
+++ grub-core/loader/multiboot_mbi2.c
@@ -913,7 +913,7 @@
   }
 #endif

-#if defined (GRUB_MACHINE_EFI) && defined (__i386__)
+#if defined (GRUB_MACHINE_EFI) && (defined (__i386__) || defined (__arm__))
   {
     struct multiboot_tag_efi32 *tag = (struct multiboot_tag_efi32 *) ptrorig;
     tag->type = MULTIBOOT_TAG_TYPE_EFI32;
--- /dev/null
+++ include/grub/arm/multiboot.h
@@ -0,0 +1,51 @@
+/*
+ *  GRUB  --  GRand Unified Bootloader
+ *  Copyright (C) 2024  Free Software Foundation, Inc.
+ *
+ *  GRUB is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  GRUB is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with GRUB.  If not, see <http://www.gnu.org/licenses/>;.
+ */
+
+#ifndef GRUB_MULTIBOOT_CPU_HEADER
+#define GRUB_MULTIBOOT_CPU_HEADER	1
+
+#define MULTIBOOT2_INITIAL_STATE  { .r[0] = MULTIBOOT2_BOOTLOADER_MAGIC, \
+    .r[2] = 0,								  \
+    .r[3] = 0,								  \
+    }
+#define MULTIBOOT_INITIAL_STATE  { .r[0] = MULTIBOOT_BOOTLOADER_MAGIC, \
+    .r[2] = 0,								\
+    .r[3] = 0,								\
+    }
+#define MULTIBOOT_ENTRY_REGISTER r[8]
+#define MULTIBOOT_MBI_REGISTER r[1]
+#define MULTIBOOT2_ARCHITECTURE_CURRENT MULTIBOOT2_ARCHITECTURE_ARM32
+
+#ifdef GRUB_MACHINE_EFI
+
+#define MULTIBOOT_EFI_INITIAL_STATE  { .r[0] = MULTIBOOT_BOOTLOADER_MAGIC, \
+    .r[2] = 0,								    \
+    .r[3] = 0,								    \
+    }
+#define MULTIBOOT2_EFI_INITIAL_STATE  { .r[0] = MULTIBOOT2_BOOTLOADER_MAGIC, \
+    .r[2] = 0,								      \
+    .r[3] = 0,								      \
+    }
+#define MULTIBOOT_EFI_ENTRY_REGISTER r[8]
+#define MULTIBOOT_EFI_MBI_REGISTER r[1]
+
+#endif /* GRUB_MACHINE_EFI */
+
+#define MULTIBOOT_ELF32_MACHINE EM_ARM
+
+#endif /* ! GRUB_MULTIBOOT_CPU_HEADER */
--- grub-core/Makefile.core.def
+++ grub-core/Makefile.core.def
@@ -1710,6 +1710,8 @@
   x86_64_efi = lib/x86_64/efi/relocator.c;
   arm64_efi = lib/arm64/relocator.c;
   arm64_efi = lib/arm64/relocator_asm.S;
+  arm_efi = lib/arm/relocator.c;
+  arm_efi = lib/arm/relocator_asm.S;
 
   extra_dist = lib/i386/relocator_common.S;
   extra_dist = kern/powerpc/cache_flush.S;
@@ -1720,6 +1722,7 @@
   enable = i386_xen_pvh;
   enable = xen;
   enable = arm64_efi;
+  enable = arm_efi;
 };
 
 module = {
@@ -1822,6 +1825,7 @@
   enable = i386_xen_pvh;
   enable = mips;
   enable = arm64_efi;
+  enable = arm_efi;
 };
 
 module = {
@@ -1951,6 +1955,8 @@
 
   arm64_efi = mmap/arm64/uppermem.c;
 
+  arm_efi = mmap/arm/uppermem.c;
+
   enable = x86;
   enable = i386_xen_pvh;
   enable = ia64_efi;
